
BitManupulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002a6  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e5  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000017c  00000000  00000000  000005af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000019f  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  000008ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000a9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:



int main(void)
{ 
	DDRD &= ~(1<<PIND2); 
  80:	52 98       	cbi	0x0a, 2	; 10
	DDRD &= ~(1<<PIND1);
  82:	51 98       	cbi	0x0a, 1	; 10
	DDRB = 0xFF;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	84 b9       	out	0x04, r24	; 4
			_delay_ms(1000);
	
		} 
		if((bit_is_set(PIND,1))&&((bit_is_clear(PIND,2)))){
			
			PORTB=0xaa;
  88:	2a ea       	ldi	r18, 0xAA	; 170
			_delay_ms(1000);
			PORTB=0x00;
			_delay_ms(1000); 
			PORTB=0x55;
  8a:	95 e5       	ldi	r25, 0x55	; 85
	DDRD &= ~(1<<PIND1);
	DDRB = 0xFF;
    /* Replace with your application code */
    while (1) 
    { 
		if((bit_is_clear(PIND,1))&&((bit_is_clear(PIND,2)))){
  8c:	49 99       	sbic	0x09, 1	; 9
  8e:	16 c0       	rjmp	.+44     	; 0xbc <main+0x3c>
  90:	4a 99       	sbic	0x09, 2	; 9
  92:	14 c0       	rjmp	.+40     	; 0xbc <main+0x3c>
	
			PORTB=0xFF; 
  94:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	3f e3       	ldi	r19, 0x3F	; 63
  98:	4d e0       	ldi	r20, 0x0D	; 13
  9a:	53 e0       	ldi	r21, 0x03	; 3
  9c:	31 50       	subi	r19, 0x01	; 1
  9e:	40 40       	sbci	r20, 0x00	; 0
  a0:	50 40       	sbci	r21, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x1c>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x26>
  a6:	00 00       	nop
			_delay_ms(1000); 
			PORTB=0x00; 
  a8:	15 b8       	out	0x05, r1	; 5
  aa:	ef e3       	ldi	r30, 0x3F	; 63
  ac:	fd e0       	ldi	r31, 0x0D	; 13
  ae:	33 e0       	ldi	r19, 0x03	; 3
  b0:	e1 50       	subi	r30, 0x01	; 1
  b2:	f0 40       	sbci	r31, 0x00	; 0
  b4:	30 40       	sbci	r19, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x30>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x3a>
  ba:	00 00       	nop
			_delay_ms(1000);
	
		} 
		if((bit_is_set(PIND,1))&&((bit_is_clear(PIND,2)))){
  bc:	49 9b       	sbis	0x09, 1	; 9
  be:	2a c0       	rjmp	.+84     	; 0x114 <main+0x94>
  c0:	4a 99       	sbic	0x09, 2	; 9
  c2:	28 c0       	rjmp	.+80     	; 0x114 <main+0x94>
			
			PORTB=0xaa;
  c4:	25 b9       	out	0x05, r18	; 5
  c6:	4f e3       	ldi	r20, 0x3F	; 63
  c8:	5d e0       	ldi	r21, 0x0D	; 13
  ca:	e3 e0       	ldi	r30, 0x03	; 3
  cc:	41 50       	subi	r20, 0x01	; 1
  ce:	50 40       	sbci	r21, 0x00	; 0
  d0:	e0 40       	sbci	r30, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x4c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x56>
  d6:	00 00       	nop
			_delay_ms(1000);
			PORTB=0x00;
  d8:	15 b8       	out	0x05, r1	; 5
  da:	ff e3       	ldi	r31, 0x3F	; 63
  dc:	3d e0       	ldi	r19, 0x0D	; 13
  de:	43 e0       	ldi	r20, 0x03	; 3
  e0:	f1 50       	subi	r31, 0x01	; 1
  e2:	30 40       	sbci	r19, 0x00	; 0
  e4:	40 40       	sbci	r20, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x60>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x6a>
  ea:	00 00       	nop
			_delay_ms(1000); 
			PORTB=0x55;
  ec:	95 b9       	out	0x05, r25	; 5
  ee:	5f e3       	ldi	r21, 0x3F	; 63
  f0:	ed e0       	ldi	r30, 0x0D	; 13
  f2:	f3 e0       	ldi	r31, 0x03	; 3
  f4:	51 50       	subi	r21, 0x01	; 1
  f6:	e0 40       	sbci	r30, 0x00	; 0
  f8:	f0 40       	sbci	r31, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x74>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x7e>
  fe:	00 00       	nop
			_delay_ms(1000);
			PORTB=0x00;
 100:	15 b8       	out	0x05, r1	; 5
 102:	3f e3       	ldi	r19, 0x3F	; 63
 104:	4d e0       	ldi	r20, 0x0D	; 13
 106:	53 e0       	ldi	r21, 0x03	; 3
 108:	31 50       	subi	r19, 0x01	; 1
 10a:	40 40       	sbci	r20, 0x00	; 0
 10c:	50 40       	sbci	r21, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x88>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x92>
 112:	00 00       	nop
			_delay_ms(1000);
			
		}  
		if((bit_is_clear(PIND,1))&&((bit_is_set(PIND,2)))){
 114:	49 99       	sbic	0x09, 1	; 9
 116:	ba cf       	rjmp	.-140    	; 0x8c <main+0xc>
 118:	4a 9b       	sbis	0x09, 2	; 9
 11a:	b8 cf       	rjmp	.-144    	; 0x8c <main+0xc>
			
			PORTB=0xFF;
 11c:	85 b9       	out	0x05, r24	; 5
 11e:	e7 ea       	ldi	r30, 0xA7	; 167
 120:	f1 e6       	ldi	r31, 0x61	; 97
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0xa2>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0xa8>
 128:	00 00       	nop
			_delay_ms(100);
			PORTB=0x00;
 12a:	15 b8       	out	0x05, r1	; 5
 12c:	e7 ea       	ldi	r30, 0xA7	; 167
 12e:	f1 e6       	ldi	r31, 0x61	; 97
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0xb0>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0xb6>
 136:	00 00       	nop
 138:	a9 cf       	rjmp	.-174    	; 0x8c <main+0xc>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
