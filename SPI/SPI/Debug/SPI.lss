
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000087  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000053  00000000  00000000  00000217  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000a2  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012d  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000045d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define MOSI 5 //check for MOSI pin
#define SCK 7  //check for SCK pin
#define ss 4
int main(void)
{ 
	DDRD=0xFF; 
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	DDRB=(1<<MOSI)|(1<<SCK);
  84:	80 ea       	ldi	r24, 0xA0	; 160
  86:	84 b9       	out	0x04, r24	; 4
	SPCR=(1<<SPE)|(1<<SPR0)|(1<<MSTR); 
  88:	81 e5       	ldi	r24, 0x51	; 81
  8a:	8c bd       	out	0x2c, r24	; 44
	
    /* Replace with your application code */
    while (1) 
    { 
		SPDR='G'; 
  8c:	87 e4       	ldi	r24, 0x47	; 71
  8e:	8e bd       	out	0x2e, r24	; 46
			while(!(SPSR)&&(1<<SPIF)){
  90:	8d b5       	in	r24, 0x2d	; 45
  92:	81 11       	cpse	r24, r1
  94:	05 c0       	rjmp	.+10     	; 0xa0 <main+0x20>
			PORTD=SPDR;
  96:	8e b5       	in	r24, 0x2e	; 46
  98:	8b b9       	out	0x0b, r24	; 11
	
    /* Replace with your application code */
    while (1) 
    { 
		SPDR='G'; 
			while(!(SPSR)&&(1<<SPIF)){
  9a:	8d b5       	in	r24, 0x2d	; 45
  9c:	88 23       	and	r24, r24
  9e:	d9 f3       	breq	.-10     	; 0x96 <main+0x16>
			PORTD=SPDR;
			} 
			return 0;
			
    }
}
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	08 95       	ret

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
