
buttonTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001c2  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e5  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000135  00000000  00000000  00000477  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018f  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  0000075f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000007ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{ 
	DDRB &=~(1<<PIND0); 
  80:	20 98       	cbi	0x04, 0	; 4
	DDRB &=~(1<<PIND1);
  82:	21 98       	cbi	0x04, 1	; 4
	
	DDRD =0xFF; 
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	8a b9       	out	0x0a, r24	; 10
    /* Replace with your application code */
    while (1) 
    { 
		if(bit_is_clear(PINB,0)){
			PORTD=0XAA; 
  88:	9a ea       	ldi	r25, 0xAA	; 170
			_delay_ms(1000); 
			PORTD=0x55; 
  8a:	85 e5       	ldi	r24, 0x55	; 85
			_delay_ms(1000);
			
		} 
		if(bit_is_clear(PINB,1)){
			
			PORTD=0XFF;
  8c:	2f ef       	ldi	r18, 0xFF	; 255
	
	DDRD =0xFF; 
    /* Replace with your application code */
    while (1) 
    { 
		if(bit_is_clear(PINB,0)){
  8e:	18 99       	sbic	0x03, 0	; 3
  90:	14 c0       	rjmp	.+40     	; 0xba <main+0x3a>
			PORTD=0XAA; 
  92:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	3f e3       	ldi	r19, 0x3F	; 63
  96:	4d e0       	ldi	r20, 0x0D	; 13
  98:	53 e0       	ldi	r21, 0x03	; 3
  9a:	31 50       	subi	r19, 0x01	; 1
  9c:	40 40       	sbci	r20, 0x00	; 0
  9e:	50 40       	sbci	r21, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x1a>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x24>
  a4:	00 00       	nop
			_delay_ms(1000); 
			PORTD=0x55; 
  a6:	8b b9       	out	0x0b, r24	; 11
  a8:	3f e3       	ldi	r19, 0x3F	; 63
  aa:	4d e0       	ldi	r20, 0x0D	; 13
  ac:	53 e0       	ldi	r21, 0x03	; 3
  ae:	31 50       	subi	r19, 0x01	; 1
  b0:	40 40       	sbci	r20, 0x00	; 0
  b2:	50 40       	sbci	r21, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x2e>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x38>
  b8:	00 00       	nop
			_delay_ms(1000);
			
		} 
		if(bit_is_clear(PINB,1)){
  ba:	19 99       	sbic	0x03, 1	; 3
  bc:	e8 cf       	rjmp	.-48     	; 0x8e <main+0xe>
			
			PORTD=0XFF;
  be:	2b b9       	out	0x0b, r18	; 11
  c0:	3f e3       	ldi	r19, 0x3F	; 63
  c2:	4d e0       	ldi	r20, 0x0D	; 13
  c4:	53 e0       	ldi	r21, 0x03	; 3
  c6:	31 50       	subi	r19, 0x01	; 1
  c8:	40 40       	sbci	r20, 0x00	; 0
  ca:	50 40       	sbci	r21, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x46>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x50>
  d0:	00 00       	nop
			_delay_ms(1000);
			PORTD=0x00;
  d2:	1b b8       	out	0x0b, r1	; 11
  d4:	3f e3       	ldi	r19, 0x3F	; 63
  d6:	4d e0       	ldi	r20, 0x0D	; 13
  d8:	53 e0       	ldi	r21, 0x03	; 3
  da:	31 50       	subi	r19, 0x01	; 1
  dc:	40 40       	sbci	r20, 0x00	; 0
  de:	50 40       	sbci	r21, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x5a>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x64>
  e4:	00 00       	nop
  e6:	d3 cf       	rjmp	.-90     	; 0x8e <main+0xe>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
