
button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001c2  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e5  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000135  00000000  00000000  00000473  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000005a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000187  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00000753  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000007e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB |= 1 << PINB0;
  80:	20 9a       	sbi	0x04, 0	; 4
	DDRB &= ~(1 << PINB1);
  82:	21 98       	cbi	0x04, 1	; 4
	//PORTB |= 1 << PINB1;
    DDRD=0xff;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	8a b9       	out	0x0a, r24	; 10
			PORTD=0x00; 
			_delay_ms(1000);
		}
		else
		{ 
			PORTD=0xAA;
  88:	2a ea       	ldi	r18, 0xAA	; 170
			_delay_ms(1000); //Slow, from previous 
			PORTD=0x55; 
  8a:	95 e5       	ldi	r25, 0x55	; 85
	//PORTB |= 1 << PINB1;
    DDRD=0xff;
	while (1)
	{
		//PORTB ^= 1 << PINB0;
		if (bit_is_clear(PINB, 1))
  8c:	19 99       	sbic	0x03, 1	; 3
  8e:	15 c0       	rjmp	.+42     	; 0xba <main+0x3a>
		{ 
			PORTD=0xff;
  90:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	3f e3       	ldi	r19, 0x3F	; 63
  94:	4d e0       	ldi	r20, 0x0D	; 13
  96:	53 e0       	ldi	r21, 0x03	; 3
  98:	31 50       	subi	r19, 0x01	; 1
  9a:	40 40       	sbci	r20, 0x00	; 0
  9c:	50 40       	sbci	r21, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x18>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x22>
  a2:	00 00       	nop
			_delay_ms(1000); //Fast 
			PORTD=0x00; 
  a4:	1b b8       	out	0x0b, r1	; 11
  a6:	3f e3       	ldi	r19, 0x3F	; 63
  a8:	4d e0       	ldi	r20, 0x0D	; 13
  aa:	53 e0       	ldi	r21, 0x03	; 3
  ac:	31 50       	subi	r19, 0x01	; 1
  ae:	40 40       	sbci	r20, 0x00	; 0
  b0:	50 40       	sbci	r21, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x2c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x36>
  b6:	00 00       	nop
  b8:	e9 cf       	rjmp	.-46     	; 0x8c <main+0xc>
			_delay_ms(1000);
		}
		else
		{ 
			PORTD=0xAA;
  ba:	2b b9       	out	0x0b, r18	; 11
  bc:	3f e3       	ldi	r19, 0x3F	; 63
  be:	4d e0       	ldi	r20, 0x0D	; 13
  c0:	53 e0       	ldi	r21, 0x03	; 3
  c2:	31 50       	subi	r19, 0x01	; 1
  c4:	40 40       	sbci	r20, 0x00	; 0
  c6:	50 40       	sbci	r21, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x42>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x4c>
  cc:	00 00       	nop
			_delay_ms(1000); //Slow, from previous 
			PORTD=0x55; 
  ce:	9b b9       	out	0x0b, r25	; 11
  d0:	3f e3       	ldi	r19, 0x3F	; 63
  d2:	4d e0       	ldi	r20, 0x0D	; 13
  d4:	53 e0       	ldi	r21, 0x03	; 3
  d6:	31 50       	subi	r19, 0x01	; 1
  d8:	40 40       	sbci	r20, 0x00	; 0
  da:	50 40       	sbci	r21, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x56>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x60>
  e0:	00 00       	nop
  e2:	d4 cf       	rjmp	.-88     	; 0x8c <main+0xc>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
