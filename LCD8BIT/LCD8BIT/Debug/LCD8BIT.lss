
LCD8BIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000166  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002fb  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000116  00000000  00000000  000005b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000135  00000000  00000000  000006cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000804  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000173  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000164  00000000  00000000  000009f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000b5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  8e:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <delay>:
//Delay function

void delay(unsigned char dtime)
{
int i,j;
for(i=0;i<=dtime;i++)
  96:	48 2f       	mov	r20, r24
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	20 e0       	ldi	r18, 0x00	; 0
  9c:	30 e0       	ldi	r19, 0x00	; 0
 /*----------------------------------------------------------------------------------------------------------*/

//Delay function

void delay(unsigned char dtime)
{
  9e:	78 e8       	ldi	r23, 0x88	; 136
  a0:	63 e1       	ldi	r22, 0x13	; 19
  a2:	07 c0       	rjmp	.+14     	; 0xb2 <delay+0x1c>
  a4:	01 97       	sbiw	r24, 0x01	; 1
int i,j;
for(i=0;i<=dtime;i++)
{
for(j=0;j<5000;j++);
  a6:	f1 f7       	brne	.-4      	; 0xa4 <delay+0xe>
//Delay function

void delay(unsigned char dtime)
{
int i,j;
for(i=0;i<=dtime;i++)
  a8:	2f 5f       	subi	r18, 0xFF	; 255
  aa:	3f 4f       	sbci	r19, 0xFF	; 255
  ac:	42 17       	cp	r20, r18
  ae:	53 07       	cpc	r21, r19
  b0:	1c f0       	brlt	.+6      	; 0xb8 <delay+0x22>
 /*----------------------------------------------------------------------------------------------------------*/

//Delay function

void delay(unsigned char dtime)
{
  b2:	87 2f       	mov	r24, r23
  b4:	96 2f       	mov	r25, r22
  b6:	f6 cf       	rjmp	.-20     	; 0xa4 <delay+0xe>
  b8:	08 95       	ret

000000ba <lcd_cmd>:

{
 

//Put command on the Data Bus
  PORTB = command;
  ba:	85 b9       	out	0x05, r24	; 5

  //Enable LCD for command writing
  PORTD = 0b00010000;
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	8b b9       	out	0x0b, r24	; 11

  //Allow delay for LCD to read the databus
  delay(1);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 4b 00 	call	0x96	; 0x96 <delay>

  //Disable LCD again
  PORTD = 0b00000000;
  c6:	1b b8       	out	0x0b, r1	; 11

  //Allow some more delay
  delay(1);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 4b 00 	call	0x96	; 0x96 <delay>
  ce:	08 95       	ret

000000d0 <init_lcd>:

//Function to Initilise LCD
void init_lcd()
{
  //Setup both lines of LCD
  lcd_cmd(0x38);
  d0:	88 e3       	ldi	r24, 0x38	; 56
  d2:	0e 94 5d 00 	call	0xba	; 0xba <lcd_cmd>
  //Set Cursor off - Enable LCD
  lcd_cmd(0x0E);
  d6:	8e e0       	ldi	r24, 0x0E	; 14
  d8:	0e 94 5d 00 	call	0xba	; 0xba <lcd_cmd>
  //Clear Screen
  lcd_cmd(0x01);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 5d 00 	call	0xba	; 0xba <lcd_cmd>
  //Goto first position
  lcd_cmd(0x80);
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	0e 94 5d 00 	call	0xba	; 0xba <lcd_cmd>
  e8:	08 95       	ret

000000ea <lcd_data>:

//Function for sending Data to LCD
void lcd_data(unsigned char data)
{
  //Put data on Data Bus
  PORTB= data;
  ea:	85 b9       	out	0x05, r24	; 5


  //Set R/S (Regiter Select) to High, and Enable to High
  PORTD = 0b00110000;
  ec:	80 e3       	ldi	r24, 0x30	; 48
  ee:	8b b9       	out	0x0b, r24	; 11

  //Allow for delay
  delay(1);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 4b 00 	call	0x96	; 0x96 <delay>

  //Disable LCD again
  PORTD = 0b00100000;
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	8b b9       	out	0x0b, r24	; 11

  //Allow for some more delay
  delay(1);
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 4b 00 	call	0x96	; 0x96 <delay>
 100:	08 95       	ret

00000102 <lcd_send_string>:
}

//Function to send String to LCD
void lcd_send_string(char* string)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ec 01       	movw	r28, r24
  while(*string)
 108:	88 81       	ld	r24, Y
 10a:	88 23       	and	r24, r24
 10c:	31 f0       	breq	.+12     	; 0x11a <lcd_send_string+0x18>
 10e:	21 96       	adiw	r28, 0x01	; 1
{
  //Send value of pointer as data to LCD
  lcd_data(*string);
 110:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
}

//Function to send String to LCD
void lcd_send_string(char* string)
{
  while(*string)
 114:	89 91       	ld	r24, Y+
 116:	81 11       	cpse	r24, r1
 118:	fb cf       	rjmp	.-10     	; 0x110 <lcd_send_string+0xe>
  //Send value of pointer as data to LCD
  lcd_data(*string);
  //Increment string pointer
  string++;
  }
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <main>:
void delay(unsigned char); 

//Main Code 
int main()
{
DDRB=0xff;    //set PORTB as out put
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	84 b9       	out	0x04, r24	; 4
  
  DDRD=0b01110000;   //Set PD.4,5 and 6 as Output
 124:	80 e7       	ldi	r24, 0x70	; 112
 126:	8a b9       	out	0x0a, r24	; 10
           R/W=PD6
         
           E=PD4          */

  //Give Inital Delay for LCD to startup as LCD is a slower Device
  delay(2);
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 4b 00 	call	0x96	; 0x96 <delay>

  init_lcd();
 12e:	0e 94 68 00 	call	0xd0	; 0xd0 <init_lcd>
while(1)
    {

        
            
   lcd_cmd(0x80);       //Goto Line-1,first position 
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 5d 00 	call	0xba	; 0xba <lcd_cmd>
  lcd_send_string("WELCOME TO! ");
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 81 00 	call	0x102	; 0x102 <lcd_send_string>

   lcd_cmd(0xC0);      //Goto Line-2, first position     
 142:	80 ec       	ldi	r24, 0xC0	; 192
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 5d 00 	call	0xba	; 0xba <lcd_cmd>

   lcd_send_string("Embedded class at DKOP :) ");
 14a:	8d e0       	ldi	r24, 0x0D	; 13
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 81 00 	call	0x102	; 0x102 <lcd_send_string>
   lcd_cmd(0x01);     //Clear the lcd
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 5d 00 	call	0xba	; 0xba <lcd_cmd>
   delay(1);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 4b 00 	call	0x96	; 0x96 <delay>
      
}
 160:	e8 cf       	rjmp	.-48     	; 0x132 <main+0x12>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
