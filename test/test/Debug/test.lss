
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000241  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f4  00000000  00000000  0000044d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000170  00000000  00000000  00000541  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000183  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000134  00000000  00000000  0000085b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000098f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>


int main(void)
{ 
	DDRD &=~(1<<PIND0); 
  80:	50 98       	cbi	0x0a, 0	; 10
	DDRD &=~(1<<PIND2); 
  82:	52 98       	cbi	0x0a, 2	; 10
	
	DDRB=0xFF; 
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	84 b9       	out	0x04, r24	; 4
		}
		else if(((bit_is_clear(PIND,1)) && (bit_is_set(PIND,2)))){
		
			for(i=0;i<10;i++){}			
			
			PORTB=i; 
  88:	9a e0       	ldi	r25, 0x0A	; 10
			_delay_ms(1000);
		
		}		 
		else if(((bit_is_set(PIND,1)) && (bit_is_clear(PIND,2)))){
			
			PORTB=0xAA; 
  8a:	3a ea       	ldi	r19, 0xAA	; 170
			_delay_ms(1000); 
			PORTB=0x55; 
  8c:	25 e5       	ldi	r18, 0x55	; 85
	DDRB=0xFF; 
	int i;
    /* Replace with your application code */
    while (1) 
    { 
		if(((bit_is_clear(PIND,1)) && (bit_is_clear(PIND,2)))){
  8e:	49 99       	sbic	0x09, 1	; 9
  90:	17 c0       	rjmp	.+46     	; 0xc0 <main+0x40>
  92:	4a 99       	sbic	0x09, 2	; 9
  94:	15 c0       	rjmp	.+42     	; 0xc0 <main+0x40>
		
			PORTB=0xFF; 
  96:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	4f e3       	ldi	r20, 0x3F	; 63
  9a:	5d e0       	ldi	r21, 0x0D	; 13
  9c:	63 e0       	ldi	r22, 0x03	; 3
  9e:	41 50       	subi	r20, 0x01	; 1
  a0:	50 40       	sbci	r21, 0x00	; 0
  a2:	60 40       	sbci	r22, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x1e>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x28>
  a8:	00 00       	nop
			_delay_ms(1000); 
			PORTB=0x00; 
  aa:	15 b8       	out	0x05, r1	; 5
  ac:	ef e3       	ldi	r30, 0x3F	; 63
  ae:	fd e0       	ldi	r31, 0x0D	; 13
  b0:	43 e0       	ldi	r20, 0x03	; 3
  b2:	e1 50       	subi	r30, 0x01	; 1
  b4:	f0 40       	sbci	r31, 0x00	; 0
  b6:	40 40       	sbci	r20, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x32>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3c>
  bc:	00 00       	nop
  be:	e7 cf       	rjmp	.-50     	; 0x8e <main+0xe>
			_delay_ms(1000);
		
		}		 
		else if(((bit_is_set(PIND,1)) && (bit_is_clear(PIND,2)))){
  c0:	49 9b       	sbis	0x09, 1	; 9
  c2:	17 c0       	rjmp	.+46     	; 0xf2 <main+0x72>
  c4:	4a 99       	sbic	0x09, 2	; 9
  c6:	15 c0       	rjmp	.+42     	; 0xf2 <main+0x72>
			
			PORTB=0xAA; 
  c8:	35 b9       	out	0x05, r19	; 5
  ca:	5f e3       	ldi	r21, 0x3F	; 63
  cc:	6d e0       	ldi	r22, 0x0D	; 13
  ce:	e3 e0       	ldi	r30, 0x03	; 3
  d0:	51 50       	subi	r21, 0x01	; 1
  d2:	60 40       	sbci	r22, 0x00	; 0
  d4:	e0 40       	sbci	r30, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x50>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x5a>
  da:	00 00       	nop
			_delay_ms(1000); 
			PORTB=0x55; 
  dc:	25 b9       	out	0x05, r18	; 5
  de:	ff e3       	ldi	r31, 0x3F	; 63
  e0:	4d e0       	ldi	r20, 0x0D	; 13
  e2:	53 e0       	ldi	r21, 0x03	; 3
  e4:	f1 50       	subi	r31, 0x01	; 1
  e6:	40 40       	sbci	r20, 0x00	; 0
  e8:	50 40       	sbci	r21, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x64>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x6e>
  ee:	00 00       	nop
  f0:	ce cf       	rjmp	.-100    	; 0x8e <main+0xe>
			_delay_ms(1000); 
		}
		else if(((bit_is_clear(PIND,1)) && (bit_is_set(PIND,2)))){
  f2:	49 99       	sbic	0x09, 1	; 9
  f4:	04 c0       	rjmp	.+8      	; 0xfe <main+0x7e>
  f6:	4a 9b       	sbis	0x09, 2	; 9
  f8:	02 c0       	rjmp	.+4      	; 0xfe <main+0x7e>
		
			for(i=0;i<10;i++){}			
			
			PORTB=i; 
  fa:	95 b9       	out	0x05, r25	; 5
  fc:	c8 cf       	rjmp	.-112    	; 0x8e <main+0xe>
			
			}
		 
		else if(((bit_is_set(PIND,1)) && (bit_is_set(PIND,2)))){
  fe:	49 9b       	sbis	0x09, 1	; 9
 100:	c6 cf       	rjmp	.-116    	; 0x8e <main+0xe>
 102:	4a 9b       	sbis	0x09, 2	; 9
 104:	c4 cf       	rjmp	.-120    	; 0x8e <main+0xe>
		PORTB=0xFF; 
 106:	85 b9       	out	0x05, r24	; 5
 108:	e7 ea       	ldi	r30, 0xA7	; 167
 10a:	f1 e6       	ldi	r31, 0x61	; 97
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x8c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x92>
 112:	00 00       	nop
		_delay_ms(100); 
		PORTB=0x00; 
 114:	15 b8       	out	0x05, r1	; 5
 116:	e7 ea       	ldi	r30, 0xA7	; 167
 118:	f1 e6       	ldi	r31, 0x61	; 97
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x9a>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0xa0>
 120:	00 00       	nop
 122:	b5 cf       	rjmp	.-150    	; 0x8e <main+0xe>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
