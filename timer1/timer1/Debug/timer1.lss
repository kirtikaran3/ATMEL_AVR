
timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000af  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000074  00000000  00000000  0000025b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000d2  00000000  00000000  000002cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013f  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000517  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <timer_delay>:
		timer_delay();
    }
} 
void timer_delay(){
	
	TCNT1H=0xff; 
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	80 93 85 00 	sts	0x0085, r24
	TCNT1L=0xff; 
  86:	80 93 84 00 	sts	0x0084, r24
	
	TCCR1A=0x00; 
  8a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=0x01; 
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	80 93 81 00 	sts	0x0081, r24
	
	while((TIFR1 & 0x01)==0); 
  94:	b0 9b       	sbis	0x16, 0	; 22
  96:	fe cf       	rjmp	.-4      	; 0x94 <timer_delay+0x14>
	TCNT1H=0x00; 
  98:	10 92 85 00 	sts	0x0085, r1
	TCNT1L=0x00; 
  9c:	10 92 84 00 	sts	0x0084, r1
	TIFR1=0x01;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	86 bb       	out	0x16, r24	; 22
  a4:	08 95       	ret

000000a6 <main>:
#include <avr/io.h>

void timer_delay();
int main(void)
{ 
	DDRB=0x0f;
  a6:	8f e0       	ldi	r24, 0x0F	; 15
  a8:	84 b9       	out	0x04, r24	; 4
    /* Replace with your application code */
    while (1) 
    { 
		PORTB=0x0f; 
  aa:	cf e0       	ldi	r28, 0x0F	; 15
  ac:	c5 b9       	out	0x05, r28	; 5
		timer_delay(); 
  ae:	0e 94 40 00 	call	0x80	; 0x80 <timer_delay>
		PORTB=0x00; 
  b2:	15 b8       	out	0x05, r1	; 5
		timer_delay();
  b4:	0e 94 40 00 	call	0x80	; 0x80 <timer_delay>
    }
  b8:	f9 cf       	rjmp	.-14     	; 0xac <main+0x6>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
